// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stellar/soroban-rpc/cmd/soroban-rpc/internal/db (interfaces: LedgerReader,LedgerEntryReader)
package util

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	xdr "github.com/stellar/go/xdr"
	db "github.com/stellar/soroban-rpc/cmd/soroban-rpc/internal/db"
)

// MockLedgerReader is a mock of LedgerReader interface.
type MockLedgerReader struct {
	ctrl     *gomock.Controller
	recorder *MockLedgerReaderMockRecorder
}

// MockLedgerReaderMockRecorder is the mock recorder for MockLedgerReader.
type MockLedgerReaderMockRecorder struct {
	mock *MockLedgerReader
}

// NewMockLedgerReader creates a new mock instance.
func NewMockLedgerReader(ctrl *gomock.Controller) *MockLedgerReader {
	mock := &MockLedgerReader{ctrl: ctrl}
	mock.recorder = &MockLedgerReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLedgerReader) EXPECT() *MockLedgerReaderMockRecorder {
	return m.recorder
}

// GetLedger mocks base method.
func (m *MockLedgerReader) GetLedger(arg0 context.Context, arg1 uint32) (xdr.LedgerCloseMeta, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLedger", arg0, arg1)
	ret0, _ := ret[0].(xdr.LedgerCloseMeta)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLedger indicates an expected call of GetLedger.
func (mr *MockLedgerReaderMockRecorder) GetLedger(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLedger", reflect.TypeOf((*MockLedgerReader)(nil).GetLedger), arg0, arg1)
}

// StreamAllLedgers mocks base method.
func (m *MockLedgerReader) StreamAllLedgers(arg0 context.Context, arg1 db.StreamLedgerFn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamAllLedgers", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StreamAllLedgers indicates an expected call of StreamAllLedgers.
func (mr *MockLedgerReaderMockRecorder) StreamAllLedgers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamAllLedgers", reflect.TypeOf((*MockLedgerReader)(nil).StreamAllLedgers), arg0, arg1)
}

// MockLedgerEntryReader is a mock of LedgerEntryReader interface.
type MockLedgerEntryReader struct {
	ctrl     *gomock.Controller
	recorder *MockLedgerEntryReaderMockRecorder
}

// MockLedgerEntryReaderMockRecorder is the mock recorder for MockLedgerEntryReader.
type MockLedgerEntryReaderMockRecorder struct {
	mock *MockLedgerEntryReader
}

// NewMockLedgerEntryReader creates a new mock instance.
func NewMockLedgerEntryReader(ctrl *gomock.Controller) *MockLedgerEntryReader {
	mock := &MockLedgerEntryReader{ctrl: ctrl}
	mock.recorder = &MockLedgerEntryReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLedgerEntryReader) EXPECT() *MockLedgerEntryReaderMockRecorder {
	return m.recorder
}

// GetLatestLedgerSequence mocks base method.
func (m *MockLedgerEntryReader) GetLatestLedgerSequence(arg0 context.Context) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestLedgerSequence", arg0)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestLedgerSequence indicates an expected call of GetLatestLedgerSequence.
func (mr *MockLedgerEntryReaderMockRecorder) GetLatestLedgerSequence(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestLedgerSequence", reflect.TypeOf((*MockLedgerEntryReader)(nil).GetLatestLedgerSequence), arg0)
}

// NewCachedTx mocks base method.
func (m *MockLedgerEntryReader) NewCachedTx(arg0 context.Context) (db.LedgerEntryReadTx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewCachedTx", arg0)
	ret0, _ := ret[0].(db.LedgerEntryReadTx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewCachedTx indicates an expected call of NewCachedTx.
func (mr *MockLedgerEntryReaderMockRecorder) NewCachedTx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewCachedTx", reflect.TypeOf((*MockLedgerEntryReader)(nil).NewCachedTx), arg0)
}

// NewTx mocks base method.
func (m *MockLedgerEntryReader) NewTx(arg0 context.Context) (db.LedgerEntryReadTx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTx", arg0)
	ret0, _ := ret[0].(db.LedgerEntryReadTx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewTx indicates an expected call of NewTx.
func (mr *MockLedgerEntryReaderMockRecorder) NewTx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTx", reflect.TypeOf((*MockLedgerEntryReader)(nil).NewTx), arg0)
}
